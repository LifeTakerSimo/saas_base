datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  email                     String?         @unique
  username                  String?         @unique
  lastActiveTimestamp       DateTime        @default(now())
  isAdmin                   Boolean         @default(false)

  phoneNumber               String?
  company                   String?
  website                   String?
  address                   String?

  paymentProcessorUserId    String?         @unique
  lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.
  checkoutSessionId         String?
  subscriptionStatus        String?         // 'active', 'canceled', 'past_due', 'deleted'
  subscriptionPlan          String?         // 'hobby', 'pro'
  sendNewsletter            Boolean         @default(false)
  datePaid                  DateTime?
  credits                   Int             @default(3)

  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
  projects                  Project[]
  trialStartDate            DateTime?
  trialEndDate              DateTime?
  hasBankAccount            Boolean    @default(false)
}

model GptResponse {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
}

model Task {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  description               String
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model DailyStats {
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique

  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float           @default(0)
  totalProfit                      Float           @default(0)

  sources                          PageViewSource[]
}

model PageViewSource {
  @@id([date, name])
  name                     String
  date                     DateTime        @default(now())

  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?

  visitors                 Int
}

model Logs {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
}

model ContactFormMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?
}

model Project {
  id                  String    @id @default(uuid())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  name                String
  price               Float
  city                String
  surface             Float
  propertyType        String?
  condition           String?
  loanDuration        Int?
  interestRate        Float?
  monthlyPayment      Float?
  estimatedRent       Float?
  notaryFees          Float?
  renovationCost      Float?
  personalContribution Float?
  rentalYield         Float?
}

model PropertyType {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model City {
  id                 Int        @id @default(autoincrement())
  cityName          String     @unique
  region            Region     @relation(fields: [regionId], references: [id])
  regionId          Int
  
  // Basic Demographics & Market Data
  population        Int?
  avgPricePerSqm    Float?
  avgPriceAppartement Float?
  avgPriceVilla     Float?
  investmentScore   Float?     // Score out of 10
  
  // Market Trends & Statistics
  yearlyPriceVariation Float?
  yearlyTransactionVariation Float?
  
  // Property Type Statistics
  propertyTypeStats PropertyTypeStats[]
  marketTrendStats  MarketTrendStats[]
  priceHistoryStats PriceHistoryStats[]
  
  // Relations
  quartiers        Quartier[]
  properties       Property[]
  
  // Metadata
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  dataSource       String?    // Source of city data
  lastDataUpdate   DateTime?
  
  @@index([cityName])
  @@index([regionId])
  @@index([avgPricePerSqm])
}

model PropertyTypeStats {
  id              Int      @id @default(autoincrement())
  city            City     @relation(fields: [cityId], references: [id])
  cityId          Int
  type            String   // 'Appartement', 'Villa', 'Maison'
  percentage      Float    // Distribution percentage
  priceVariation  Float    // Yearly price variation
  transactionVariation Float // Yearly transaction variation
  averagePrice    Float?   // Average price for this type
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([cityId])
  @@index([type])
}

model MarketTrendStats {
  id              Int      @id @default(autoincrement())
  city            City     @relation(fields: [cityId], references: [id])
  cityId          Int
  month           DateTime
  sales           Int
  listings        Int
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([cityId])
  @@index([month])
}

model PriceHistoryStats {
  id              Int      @id @default(autoincrement())
  city            City     @relation(fields: [cityId], references: [id])
  cityId          Int
  year            Int
  averagePrice    Float
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([cityId])
  @@index([year])
}

model Quartier {
  id                Int      @id @default(autoincrement())
  name              String
  city              City     @relation(fields: [cityId], references: [id])
  cityId            Int
  
  // Market Data
  averagePricePerSqm Float?
  priceEvolution    Float?
  propertyCount     Int?
  investmentScore   Float?   // Score out of 10
  
  // Demographics
  population        Int?
  medianAge        Float?
  incomeLevel      String?   // 'Low', 'Medium', 'High'
  
  // Amenities
  schoolCount      Int?
  parkCount        Int?
  shopCount        Int?
  transportCount   Int?
  
  // Market Metrics
  demandLevel      String?   // 'Low', 'Medium', 'High'
  avgDaysOnMarket  Int?
  minPrice         Float?
  maxPrice         Float?
  
  // Property Type Distribution
  propertyTypeDistribution PropertyTypeDistribution[]
  
  // Metadata
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([cityId])
  @@index([name])
  @@unique([cityId, name])
}

model PropertyTypeDistribution {
  id              Int      @id @default(autoincrement())
  quartier        Quartier @relation(fields: [quartierId], references: [id])
  quartierId      Int
  type            String   // 'Appartement', 'Villa', 'Maison'
  percentage      Float
  averagePrice    Float
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([quartierId])
  @@index([type])
}

model Property {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Basic Information
  title             String
  description       String
  price             Float
  surface           Float
  status            String    // 'À vendre', 'Vendu', etc.
  condition         String?   // 'Neuf', 'Bon état', 'À rénover'
  
  // Type Relation - Replace string type with relation
  propertyType      PropertyType @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId    String
  
  // City Relation - Replace string city with relation
  city              City      @relation(fields: [cityId], references: [id])
  cityId            Int
  
  // Location Details
  country           String    @default("Maroc")
  region            Region    @relation(fields: [regionId], references: [id])
  regionId          Int
  quartier          String?
  address           String?
  postalCode        String?
  latitude          Float?
  longitude         Float?
  distanceToCenter  Float?    // Distance to city center in km

  
  // Features
  bedrooms          Int
  bathrooms         Int
  features          String[]
  
  imageUrl          String
  images            String[]
  
  // Market Analysis
  pricePerSquareMeter Float   @default(0)
  neighborhoodPrice   Float?
  rentalPotential    String?
  annualPriceChange  Float?
  priceEvolutionHistory Json?
  
  // Rental Analysis
  suggestedRent      Float?
  grossYield         Float?   // Rendement Brut
  cityYield          Float?   // Rendement Ville

  // source
  link               String?
  site               String?
  createdBy          String?
  modifiedBy         String?
  modifiedAt         DateTime?  

  // Offre 
  sell               Boolean   @default(true)
  longTerm           Boolean   @default(false)

  @@index([cityId])
  @@index([propertyTypeId])
  @@index([price])
  @@index([surface])
  @@index([status])
  @@index([regionId])
}

model Region {
  code                            String?    
  id                              Int       @id @default(autoincrement())
  name                            String    @unique
  year                            Int
  tauxActivite                    Decimal?  @db.Decimal(5, 2)  // taux_d_activite
  populationActiveMille           Int?      // population_active_mille
  tauxEmploi                      Decimal?  @db.Decimal(5, 2)  // taux_d_emploi
  populationActiveOccupeeMille    Int?      // population_active_occupee_mille
  tauxSousEmploi                  Decimal?  @db.Decimal(5, 2)  // taux_sous_emploi
  populationSousEmploiMille       Int?      // population_sous_emploi_mille
  chomageMille                    Int?      // chomage_mille
  tauxChomage                     Decimal?  @db.Decimal(5, 2)  // taux_de_chomage
  
  // Metadata
  createdAt                       DateTime  @default(now())
  updatedAt                       DateTime  @updatedAt
  dataSource                      String?
  lastDataUpdate                  DateTime?
  
  // Indexes for common queries
  @@index([year])
  @@index([tauxChomage])
  @@index([tauxActivite])
  @@index([name])
}
